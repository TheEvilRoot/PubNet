@using PubNet.API.DTO
@inject ApiClient ApiClient
@inject AuthenticationService Auth
@inject NavigationManager Nav

@if (Error is not null)
{
	<Alert Color="Color.Danger">
		<strong>That didn't work.</strong> @Error
	</Alert>
}

@if (Success is not null)
{
	<Alert Color="Color.Success">
		<strong>Success!</strong> @Success
	</Alert>
}

<EditForm Model="LoginRequest" OnSubmit="SubmitForm">
	<div class="form-group">
		<label for="login-email">E-Mail</label>
		<InputText type="email" required @bind-Value="LoginRequest.Email" class="form-control" id="login-email"/>
	</div>
	<div class="form-group">
		<label for="login-password">Password</label>
		<InputText type="password" required @bind-Value="LoginRequest.Password" class="form-control" id="login-password"/>
	</div>
	<input type="submit" class="btn btn-primary mt-3" value="Login"/>
</EditForm>

@code {
	private LoginRequest LoginRequest { get; set; } = new();

	private string? Error { get; set; }
	private string? Success { get; set; }

	private async Task SubmitForm(EditContext e)
	{
		Error = null;
		Success = null;

		var response = await ApiClient.PostAsync("authentication/login", LoginRequest);
		if (response.IsSuccessStatusCode)
		{
			var token = await response.Content.ReadFromJsonAsync<JwtTokenResponse>();
			if (token is null)
				return;

			await Auth.StoreTokenAsync(token.Token);
			await Auth.GetSelfAsync();

			Nav.NavigateTo("/?message=welcome-back", true);
		}
		else
		{
			var message = await response.Content.ReadFromJsonAsync<ErrorResponse>();

			Error = message?.Error?.Message;
		}
	}

}
