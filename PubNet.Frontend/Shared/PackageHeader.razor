@using PubNet.API.DTO

@inject PackagesService Packages
@inject ApiClient Http

<PageTitle>@Title</PageTitle>

<h1>
	<code>@Title</code>

	@if (LatestVersion is not null)
	{
		@:&nbsp;
		<ClickToCopyButton Content="@PubspecVersionText"/>
	}
</h1>

<p class="text-muted">
	@if (PackageModel is null)
	{
		<em>Loading...</em>
	}
	else
	{
		<span>
			Published by <AuthorLink Username="@AuthorUserName"/>
		</span>

		@if (LatestVersion is not null)
		{
			@:&nbsp;
			<abbr title="@LatestVersion.Published">@(LatestVersion.Published.Humanize())</abbr>
		}
	}
</p>

@code {
	[Parameter]
	public string? PackageName { get; set; }

	private bool Loading { get; set; }

	private PackageDto? PackageModel { get; set; }

	private PackageVersionDto? LatestVersion => PackageModel?.Latest;

	private string PubspecVersionText => PackageName is null || LatestVersion is null
		? string.Empty
		: TextGenerator.PubspecVersionText(PackageName, LatestVersion.Version, PackageModel?.Mirrored ?? false, Http.BaseAddress);

	private string Title => PackageName + (LatestVersion is null ? string.Empty : $": {LatestVersion.Version}");

	private string? AuthorUserName => PackageModel?.Author?.UserName;

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		if (PackageName is null)
			return;

		Loading = true;
		PackageModel = null;
		try
		{
			PackageModel = await Packages.GetPackage(PackageName, true);
		}
		catch (Exception)
		{
			// ignore
		}
		finally
		{
			Loading = false;
		}
	}

}
