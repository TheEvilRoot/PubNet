@using PubNet.API.DTO

@inject PackagesService PackagesService
@inject AnalysisService AnalysisService
@inject AuthenticationService Auth
@inject AlertService Alert
@inject NavigationManager Nav

@if (Version is null)
{
    <Paragraph TextColor="TextColor.Muted">
        <em>Loading...</em>
    </Paragraph>
}
else
{
    <Row>
        <Column ColumnSize="ColumnSize.Is12.Is8.OnDesktop">
            <PackageHeader Package="@Package" Version="@Version"/>

            <Card Margin="Margin.Is3.FromTop">
                <CardBody>
                    <CardText>
                        @if (Analysis?.ReadmeText is not null)
                        {
                            <Markdown Content="@Analysis.ReadmeText" BaseUrl="@Version.PubSpec.Repository"/>
                        }
                        else if (Analysis?.ReadmeFound is false)
                        {
                            <Paragraph TextColor="TextColor.Muted">
                                <em>No README.md found.</em>
                            </Paragraph>
                        }
                        else if (Package?.Mirrored != true)
                        {
                            <Paragraph TextColor="TextColor.Muted">
                                <em>README analysis pending</em>
                            </Paragraph>
                        }
                    </CardText>
                </CardBody>
            </Card>
        </Column>
        <Column ColumnSize="ColumnSize.Is12.Is4.OnDesktop">
            @if (ShowPackageAdminTools)
            {
                <Heading Size="HeadingSize.Is3">Package Admin Tools</Heading>

                <PackageAdminToolbar
                    Margin="Margin.Is3.OnY"
                    Package="@Package"
                    Editing="@Editing"
                    OnDeleteClicked="OnDeleteClicked"
                    OnDiscontinueClicked="OnDiscontinueClicked"/>
            }

            <Heading Size="HeadingSize.Is3">Description</Heading>

            <Lead Margin="Margin.Is3.OnY">
                @(Version.PubSpec.Description)
            </Lead>

            <Heading Size="HeadingSize.Is3">Dependencies</Heading>

            @if (Version.PubSpec.Dependencies is null or { Count: 0 })
            {
                <Paragraph Margin="Margin.Is3.OnY">
                    <em>No dependencies.</em>
                </Paragraph>
            }
            else
            {
                <Div Class="content">
                    <UnorderedList Margin="Margin.Is3.OnY">
                        <Repeater Items="Version.PubSpec.Dependencies.Keys">
                            <UnorderedListItem>
                                <NavLink href="@TextGenerator.HrefToDependency(context)">@context</NavLink>
                            </UnorderedListItem>
                        </Repeater>
                    </UnorderedList>
                </Div>
            }

            <Heading Size="HeadingSize.Is3">Dev Dependencies</Heading>

            @if (Version.PubSpec.DevDependencies is null or { Count: 0 })
            {
                <Paragraph Margin="Margin.Is3.OnY">
                    <em>No dev dependencies.</em>
                </Paragraph>
            }
            else
            {
                <Div Class="content">
                    <UnorderedList Margin="Margin.Is3.OnY">
                        <Repeater Items="Version.PubSpec.DevDependencies.Keys">
                            <UnorderedListItem>
                                <NavLink href="@TextGenerator.HrefToDependency(context)">@context</NavLink>
                            </UnorderedListItem>
                        </Repeater>
                    </UnorderedList>
                </Div>
            }
        </Column>
    </Row>
}

@code {

    [Parameter]
    public PackageDto? Package { get; set; }

    [Parameter]
    public PackageVersionDto? Version { get; set; }

    [Parameter]
    public EventCallback<string?> OnError { get; set; }

    [Parameter]
    public EventCallback<string?> OnInfo { get; set; }

    [Parameter]
    public bool Editing { get; set; }

    [Parameter]
    public EventCallback<bool> OnEditing { get; set; }

    [Parameter]
    public EventCallback OnPackageDiscontinued { get; set; }

    private PackageVersionAnalysisDto? Analysis { get; set; }

    private bool ShowPackageAdminTools { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (Package is null)
            return;

        Version ??= Package.Latest;
        if (Version is null)
            return;

        ShowPackageAdminTools = false;
        ShowPackageAdminTools = !Package.Mirrored && await Auth.IsSelf(Package?.Author?.UserName);

        try
        {
            Analysis = await AnalysisService.GetAnalysisForVersion(Version.PubSpec.Name, Version.Version, true);
        }
        catch (Exception)
        {
    // ignored
        }
    }

    private async Task OnDiscontinueClicked()
    {
        if (Package is null) return;

        var replacement = await Alert.Prompt($"Are you sure you want to discontinue {Package.Name}? This change cannot be undone.\r\n\r\nYou can suggest a replacement package here:");
        if (replacement is null)
            return;

        await OnInfo.InvokeAsync(null);
        await OnError.InvokeAsync(null);
        await OnEditing.InvokeAsync(true);

        try
        {
            await PackagesService.DiscontinuePackage(Package.Name, replacement);

            await OnInfo.InvokeAsync($"Package {Package.Name} has been marked as discontinued.");

            await OnPackageDiscontinued.InvokeAsync();
        }
        catch (Exception e)
        {
            await OnError.InvokeAsync(e.Message);
        }
        finally
        {
            await OnEditing.InvokeAsync(false);
        }
    }

    private async Task OnDeleteClicked()
    {
        if (Package is null) return;

        var confirmed = await Alert.Confirm("Are you sure? All versions will be deleted and you can no longer 'pub get' it.");
        if (!confirmed)
            return;

        await OnInfo.InvokeAsync(null);
        await OnError.InvokeAsync(null);
        await OnEditing.InvokeAsync(true);

        try
        {
            await PackagesService.DeletePackage(Package.Name);

            Nav.NavigateTo("/?message=package-deleted");
        }
        catch (Exception e)
        {
            await OnError.InvokeAsync(e.Message);
        }
        finally
        {
            await OnEditing.InvokeAsync(false);
        }
    }

}
