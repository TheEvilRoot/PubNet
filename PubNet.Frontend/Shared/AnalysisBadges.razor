@using PubNet.API.DTO
@inject ApiClient Http
@inject PackagesService Packages
@inject AnalysisService Analysis
@inject ILogger<AnalysisBadges> Logger

<div style="display: flex; align-items: center; gap: 0.25rem">
	@if (Mirrored)
	{
		<a href="@("https://pub.dev/packages/" + PackageName)" target="_blank">
			<div class="badge bg-secondary">Mirrored from pub.dev</div>
		</a>
	}

	@if (AnalysisDto?.DocumentationHref is not null)
	{
		<NavLink href="@(DocumentationUrl(AnalysisDto.DocumentationHref))" class="badge bg-info">Docs</NavLink>
	}

	@switch (AnalysisDto?.Formatted)
	{
		case true:
			<div class="badge bg-success">Formatted</div>
			break;
		case false:
			<div class="badge bg-warning">Not Formatted</div>
			break;
		default:
			if (PackageVersionDto is not null)
			{
				<div class="badge bg-secondary">Not analyzed</div>
			}
			break;
	}

	@if (IsDiscontinued)
	{
		<div class="badge bg-danger">Discontinued</div>

		@if (ReplacedBy is not null)
		{
			<NavLink href="@(HrefToReplacement(ReplacedBy))" class="badge bg-warning">Replaced by <code>@ReplacedBy</code></NavLink>
		}
	}

	@if (Retracted)
	{
		<div class="badge bg-danger">Retracted</div>
	}
</div>

@code {

	[Parameter]
	public PackageDto? PackageDto { get; set; }

	[Parameter]
	public PackageVersionDto? PackageVersionDto { get; set; }

	private PackageVersionAnalysisDto? AnalysisDto { get; set; }

	private string? PackageName => PackageDto?.Name ?? PackageVersionDto?.PubSpec.Name;

	private bool Mirrored => PackageDto?.Mirrored ?? false;

	private bool IsDiscontinued => PackageDto?.IsDiscontinued ?? false;

	private string? ReplacedBy => PackageDto?.ReplacedBy;

	private bool Retracted => PackageVersionDto?.Retracted ?? false;

	private static string HrefToReplacement(string name) => "/packages/" + name;

	private string DocumentationUrl(string uri) => Http.BaseAddress!.TrimEnd('/') + '/' + uri.TrimStart('/');

	/// <inheritdoc />
	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		if (PackageVersionDto is null) return;

		if (!(PackageDto?.Mirrored ?? false))
		{
			AnalysisDto = await Analysis.GetAnalysisForVersion(PackageVersionDto.PubSpec.Name, PackageVersionDto.Version, false);
		}
	}

}
