@page "/package/{PackageName}"
@using PubNet.API.DTO
@using System.Net

@inject ApiClient Http
@inject AuthenticationService Auth
@inject NavigationManager Nav
@inject AlertService Alert

@if (Error is not null)
{
	<div class="alert alert-danger">
		<strong>Whoops!</strong> @Error
	</div>

	@if (ShowUpstreamLink)
	{
		<p>
			Maybe you can find this package at pub.dev instead: <a href="@("https://pub.dev/packages/" + PackageName)">pub.dev/packages/@PackageName</a>
		</p>
	}
}
@if (Success is not null)
{
	<div class="alert alert-success">
		<strong>Alright!</strong> @Success
	</div>
}

@if (PackageModel is null && Error is null)
{
	<PageTitle>@PackageName</PageTitle>

	<h1>
		<code>@PackageName</code>
	</h1>

	<p>
		<em>Loading...</em>
	</p>
}
else if (PackageModel is not null)
{
	@if (PackageModel.Latest is not { } latest)
	{
		<PageTitle>@PackageName</PageTitle>

		<h1>
			<code>@PackageName</code>
		</h1>

		<p>
			Published by <AuthorLink Username="@PackageModel.Author?.UserName"/>
		</p>

		@if (ShowPackageAdminTools)
		{
			<button class="btn btn-sm btn-outline-danger" @onclick="OnDeleteClicked" disabled="@Editing">Delete</button>
		}
	}
	else
	{
		<PageTitle>@PackageName: @latest.Version</PageTitle>

		<h1>
			<code>@PackageName: @latest.Version</code>

			<ClickToCopyButton Content="@PubspecVersionText(latest.Version, PackageModel.Mirrored)"/>
		</h1>

		<p class="text-muted">
			Published by <AuthorLink Username="@PackageModel.Author?.UserName"/> <abbr title="@latest.Published">@(latest.Published.Humanize())</abbr>
		</p>

		@if (ShowPackageAdminTools)
		{
			<div class="my-3">
				<button class="btn btn-sm btn-outline-danger" @onclick="OnDeleteClicked" disabled="@Editing">Delete</button>
			</div>
		}

		<AnalysisBadges Analysis="latest.Analysis" Mirrored="PackageModel.Mirrored" PackageName="PackageName"/>

		<p class="my-3 lead">@(latest.PubSpec.Description)</p>

		<div class="row">
			<div class="col-12 col-sm-6">
				<h2 class="mt-4">Dependencies</h2>

				@if (latest.PubSpec.Dependencies is null or { Count: 0 })
				{
					<p class="my-3">
						<em>No dependencies.</em>
					</p>
				}
				else
				{
					<ul>
						@foreach (var dependency in latest.PubSpec.Dependencies)
						{
							<li>
								<NavLink href="@HrefToDependency(dependency.Key)">@dependency.Key</NavLink>
							</li>
						}
					</ul>
				}
			</div>
			<div class="col-12 col-sm-6">
				<h2 class="mt-4">Dev Dependencies</h2>

				@if (latest.PubSpec.DevDependencies is null or { Count: 0 })
				{
					<p class="my-3">
						<em>No dependencies.</em>
					</p>
				}
				else
				{
					<ul>
						@foreach (var dependency in latest.PubSpec.DevDependencies)
						{
							<li>
								<NavLink href="@HrefToDependency(dependency.Key)">@dependency.Key</NavLink>
							</li>
						}
					</ul>
				}
			</div>
		</div>
	}

	@if (PackageModel.Versions is not null)
	{
		<h2>Versions</h2>

		<table class="table">
			<thead>
			<tr>
				<th>Version</th>
				<th>Published At</th>
				@if (!IsMirrored)
				{
					<th>Badges</th>
				}
				@if (ShowPackageAdminTools)
				{
					<th>Actions</th>
				}
			</tr>
			</thead>
			<tbody>
			@foreach (var version in PackageModel.Versions.OrderByDescending(v => v.Published).Take(10))
			{
				<tr>
					<td>
						<code>@version.Version</code>

						<ClickToCopyButton Content="@($"{PackageName}: ^{version.Version}")"/>
					</td>
					<td>
						<abbr title="@version.Published">@(version.Published.Humanize())</abbr>
					</td>
					@if (!IsMirrored)
					{
						<td>
							<AnalysisBadges Analysis="version.Analysis"/>
						</td>
					}
					@if (ShowPackageAdminTools)
					{
						<td>
							<button class="btn btn-sm btn-outline-danger" @onclick="() => OnDeleteVersionClicked(version.Version)">Delete</button>
						</td>
					}
				</tr>
			}

			@if (PackageModel.Versions.Count() > 10)
			{
				<tr>
					<td colspan="3">
						<span class="text-muted">... and @(PackageModel.Versions.Count() - 10) older versions</span>
					</td>
				</tr>
			}
			</tbody>
		</table>
	}
	else
	{
		<p class="my-3">
			<em>No versions found.</em>
		</p>
	}
}

@code
{
	[Parameter]
	public string? PackageName { get; set; }

	private PackageDto? PackageModel { get; set; }

	private string? Error { get; set; }
	private string? Success { get; set; }

	private bool Editing { get; set; }
	private bool ShowPackageAdminTools { get; set; }
	private bool ShowUpstreamLink { get; set; }

	private static string HrefToDependency(string name)
	{
		return "/package/" + name;
	}

	private string PubspecVersionText(string version, bool mirrored)
	{
		if (mirrored)
			return $"{PackageName}: ^{version}";

		return $@"{PackageName}:
  hosted:
    url: {Http.BaseAddress}
    name: {PackageName}
    version: ^{version}";
	}

	private bool IsMirrored => PackageModel?.Mirrored ?? false;

	protected override async Task OnParametersSetAsync()
	{
		await base.OnParametersSetAsync();

		await ReloadPackage();
	}

	private async Task ReloadPackage() {
		Error = null;
		PackageModel = null;
		Editing = false;
		ShowPackageAdminTools = false;
		ShowUpstreamLink = false;

		try
		{
			var response = await Http.GetAsync($"packages/{PackageName}");
			if (response.IsSuccessStatusCode)
			{
				PackageModel = await response.Content.ReadFromJsonAsync<PackageDto>();
			}
			else
			{
				PackageModel = null;
				if (response.StatusCode == HttpStatusCode.NotFound)
				{
					Error = "The package you are looking for does not exist";
					ShowUpstreamLink = true;
				}
				else
				{
					Error = "An unknown error occurred";
				}
			}

			ShowPackageAdminTools = PackageModel?.Author?.UserName is not null
			                        && await Auth.IsSelf(PackageModel.Author.UserName);
		}
		catch (Exception e)
		{
			Error = e.Message;
		}
	}

	private async Task OnDeleteClicked()
	{
		var confirmed = await Alert.Confirm("Are you sure? All versions will be deleted and you can no longer 'pub get' it.");
		if (!confirmed)
			return;

		Error = null;
		Editing = true;

		try
		{
			var response = await Http.DeleteAsync($"packages/{PackageName}");
			if (response.IsSuccessStatusCode)
			{
				Nav.NavigateTo("/?message=package-deleted");
			}
			else
			{
				Error = response.StatusCode switch {
					HttpStatusCode.Unauthorized => "You are not authorized to delete this package",
					HttpStatusCode.NotFound => "The package was not found",
					_ => "An unknown error occurred",
				};
			}
		}
		catch (Exception e)
		{
			Error = e.Message;
		}
		finally
		{
			Editing = false;
		}
	}

	private async Task OnDeleteVersionClicked(string version)
	{
		var confirmed = await Alert.Confirm($"Are you sure you want to delete {PackageName}: {version}?");
		if (!confirmed)
			return;

		Success = null;
		Error = null;
		Editing = true;

		try
		{
			var response = await Http.DeleteAsync($"packages/{PackageName}/versions/{version}");
			if (response.IsSuccessStatusCode)
			{
				Success = $"Version {version} has been deleted.";

				await ReloadPackage();
			}
			else
			{
				Error = response.StatusCode switch {
					HttpStatusCode.Unauthorized => "You are not authorized to delete this package version",
					HttpStatusCode.NotFound => "This package version was not found",
					_ => "An unknown error occurred",
				};
			}
		}
		catch (Exception e)
		{
			Error = e.Message;
		}
		finally
		{
			Editing = false;
		}
	}
}
