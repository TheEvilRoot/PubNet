@page "/author/{Username}"
@using PubNet.API.DTO
@inject HttpClient Http
@inject AuthenticationService Auth

<PageTitle>Author: @Username</PageTitle>

<h1>Author: @Username</h1>

@if (AuthorModel is null && Error is null)
{
    <p>
        <em>Loading...</em>
    </p>
}

@if (Error is not null)
{
    <div class="alert alert-danger">
        <strong>An error ocurred:</strong> @Error
    </div>
}

@if (AuthorModel is not null)
{
    <p>Registered since: @AuthorModel.RegisteredAtUtc</p>

    @if (Editing)
    {
        <EditAuthorForm Author="AuthorModel"/>
    }
    else
    {
        <p>Name: @AuthorModel.Name</p>

        @if (AuthorModel.Website is not null)
        {
            <p>Website: <a href="@AuthorModel.Website" target="_blank">@AuthorModel.Website</a></p>
        }
    }

    @if (IsSelf)
    {
        <button class="btn btn-outline-info" @onclick="() => Editing = !Editing">
            @(Editing ? "Done" : "Edit")
        </button>
    }

    <hr>

    @if (AuthorPackages is null && PackagesError is null)
    {
        <p>
            <em>Loading packages...</em>
        </p>
    }

    @if (PackagesError is not null)
    {
        <div class="alert alert-danger">
            <strong>An error ocurred while loading the author packages:</strong> @PackagesError
        </div>
    }

    @if (AuthorPackages is not null)
    {
        <h2>Packages</h2>

        <table class="table">
            <thead>
            <tr>
                <th>Name</th>
                <th>Latest Version</th>
                <th>Published At</th>
            </tr>
            </thead>
            <tbody>
            @if (AuthorPackages.Any())
            {
                @foreach (var package in AuthorPackages.OrderByDescending(p => p.Name))
                {
                    <tr>
                        <td>
                            <NavLink href="@("/package/" + package.Name)">@package.Name</NavLink>
                        </td>
                        <td>@package.Latest?.Version</td>
                        <td>@package.Latest?.PublishedAtUtc</td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="3">
                        <p class="text-center">
                            This author has not published any packages yet.
                        </p>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    }
}

@code
{
    [Parameter]
    public string? Username { get; set; }

    private bool IsSelf { get; set; }
    private bool Editing { get; set; }

    private Models.Author? AuthorModel { get; set; }
    private string? Error { get; set; }

    private IEnumerable<Models.Package>? AuthorPackages { get; set; }
    private string? PackagesError { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (Username is null)
        {
            Error = "No username set.";

            return;
        }

        try
        {
            Error = null;
            AuthorModel = await Http.GetFromJsonAsync<Models.Author>($"authors/{Username}");

            var response = await Http.GetFromJsonAsync<PackagesResponse>($"authors/{Username}/packages");
            if (response is not null)
            {
                AuthorPackages = response.Packages;
            }
            else
            {
                PackagesError = "Failed loading authors packages";
            }

            IsSelf = await Auth.IsSelf(Username);
        }
        catch (Exception e)
        {
            Error = e.Message;
        }
    }
}